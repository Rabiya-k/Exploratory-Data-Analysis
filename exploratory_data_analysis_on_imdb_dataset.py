# -*- coding: utf-8 -*-
"""Exploratory Data Analysis on imdb dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1neSsa18eRM-5hYDKCnnkggwbRJkIzKFM

#**Problem Description**
##You have been hired by a rookie movie producer to help him decide what type of movies to produce and which actors to cast. You have to back your recommendations based on thorough analysis of the data he shared with you which has the list of 3000 movies and the corresponding details.
##As a data scientist, you have to first explore the data and check its sanity.
##Further, you have to answer the following questions:
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np

imdb = pd.read_csv('/content/drive/MyDrive/Datasets/imdb_data.csv')
# , encoding_errors= 'replace',  error_bad_lines=False)

imdb.head(3)

imdb.size

imdb.shape

imdb.info()

imdb.columns

not_null= ['budget', 'genres','original_language', 'original_title','cast', 'crew', 'revenue']

imdb.loc[~imdb['genres'].isna(),'genres']

print(type(imdb.loc[0,'cast']))
print(type(imdb.loc[0,'crew']))
print(type(imdb.loc[0,'genres']))

def convert_to_list(str):
  return eval(str)

imdb.loc[~imdb['cast'].isna(),'cast']= imdb.loc[~imdb['cast'].isna(),'cast'].apply(convert_to_list)
imdb.loc[~imdb['crew'].isna(),'crew']= imdb.loc[~imdb['crew'].isna(),'crew'].apply(convert_to_list)
imdb.loc[~imdb['genres'].isna(),'genres']= imdb.loc[~imdb['genres'].isna(),'genres'].apply(convert_to_list)

type(imdb['cast'][0])

imdb1 = imdb.copy()

imdb1.head(3)

imdb1.describe()

"""**1. Which movie made the highest profit? Who were its producer and director? Identify the actors in that film.**"""

imdb1[imdb1['budget']==0].head(3)

imdb1['budget'].median()

imdb1.loc[imdb1['budget']<1000,'budget']= imdb1['budget'].median()

imdb1.loc[imdb1['revenue']<1000,'revenue']= imdb1['revenue'].median()

imdb1.describe()

#Replace extremely low values of budget and revenue column with median values of budget, revenue
imdb1['profit'] = imdb1['revenue'] - imdb1['budget']
imdb1['roi']= 100* (imdb1['profit']/imdb1['budget'])
imdb1.head()

imdb1['profit'].max()

imdb1['profit'].idxmax()

"""**Which movie made the highest profit?**"""

imdb1.loc[imdb1['profit'].idxmax(),'original_title']

most_movie_profit = imdb1.iloc[imdb1['profit'].idxmax()]

most_movie_profit

most_movie_profit.head()

most_movie_profit.loc['cast'][0]['name']

crew_list= most_movie_profit.loc['crew']
crew_list[0:3]

"""
**Name of the director and producer of the movie which made highest profit are:**"""

producer_list=[]
director_list=[]
for elem in crew_list:
  if elem['job']=='Producer':
    producer_list.append(elem['name'])
  if elem['job']=='Director':
    director_list.append(elem['name'])

print(f'PRODUCERS : {producer_list}')
print(f'DIRECTORS : {director_list}')

cast_list =most_movie_profit['cast']
cast_list[0:3]

"""**Actors in the Highest profit movie**"""

actor_list=[]
for elem in cast_list:
  actor_list.append(elem['name'])

#actors
print(f'Actors of the movie are :')
actor_list

"""**2. This data has information about movies made in different languages. Which language has the highest average ROI (return on investment)?**"""

#we already calculated roi above
 #df['roi'] = 100 * df['profit']/df['budget']

#Use groupby function on movie languages and ROI and finding mean
imdb1.groupby('original_language')['roi'].mean().reset_index().sort_values(by='roi',ascending=False).head(3)

print('Language with highest average roi is')
imdb1.groupby('original_language')['roi'].mean().reset_index().sort_values(by='roi',ascending=False).iloc[0,0]

"""**3. Find out the unique genres of movies in this dataset.**

"""

#considering only those rows in genres column which have no null values
no_na_genres = imdb1[~imdb1['genres'].isna()] #tilda

len(no_na_genres)

no_na_genres.loc[0,'genres']

no_na_genres.loc[0,'genres'][0]

no_na_genres.loc[3,'genres']

#create a list of genres and using .iterrow() method to iterate over genres column
# .iterrow() --->> same as enumerate() its compulsory to use it in case of DataFrame
gen_list=[]
for index,row in no_na_genres.iterrows():
  genre = no_na_genres.loc[index,'genres']
  for k in genre:
    gen_list.append(k['name'])

#unique list of genres are:
pd.DataFrame(set(gen_list),columns=['Unique Genres'])

"""**4. Make a table of all the producers and directors of each movie. Find the top 3 producers who have produced movies with the highest average RoI?**

"""

#considering only those rows in crew column which have no null values
no_na_crew = imdb1[~imdb1['crew'].isna()]

no_na_crew.shape

#A simple function to extract list of all producers for a given movie_index
def create_producer_list(index):
  movie_index = no_na_crew.iloc[index]
  crew_list= movie_index.loc['crew']
  producer_list=[]
  for elem in crew_list:
     if elem['job']=='Producer':
        producer_list.append(elem['name'])
  return producer_list

create_producer_list(61)

#A simple function to extract names of all directors for a given movie_index
#each movie has only one director
def create_director(index):
  movie_index = no_na_crew.iloc[index]
  crew_list= movie_index.loc['crew']

  for elem in crew_list:
     if elem['job']=='Director':
        return elem['name']

create_director(61)

#create a empty DataFrame with required Column names in which we will append data later
Table = pd.DataFrame(columns=['Movie Title','Producers','Directors','ROI'])

""" appending in Table Df and using Try Except block to bypass error because some values of the crew dictionaries contain float as value"""

for index,row in no_na_crew.iterrows():

  try:
      Table = Table.append({'Movie Title':no_na_crew.loc[index,'original_title'],'Producers':create_producer_list(index),'Directors':create_director(index),'ROI':no_na_crew.loc[index,'roi']},ignore_index=True)
  except:
    continue

"""### Table containing columns of Movie Title,its Producers,Directors and ROI"""

Table.head(10)

Table.sort_values(by='ROI', ascending=False).reset_index().head(3)

"""**5. Which actor has acted in the most number of movies? Deep dive into the movies, genres and profits corresponding to this actor.**

"""

#considering only those rows in cast column which have no null values
no_na_cast = imdb1[~imdb1['cast'].isna()]

no_na_cast.loc[0,'cast'][0]['name']

actor_list=[]
for index,row in no_na_cast.iterrows():
  for iter in no_na_cast.loc[index,'cast']:
    if type(iter)== dict:
      actor= iter['name']
      actor_list.append(actor)

#create a  DataFrame with actor list
Actor_Table = pd.DataFrame(actor_list,columns=['Name of Actor'])

Actor_Table.shape

Actor_Table.head()

#sorting the actors using groupby function
Actor_Table.value_counts().reset_index().head()

"""### Actors who have done maximum movies are:"""

print('Samuel L. Jackson and Robert De Niro both have done 30 films')

profit1=[]
profit2=[]
movie1=[]
movie2=[]
for index,row in no_na_cast.iterrows():
  for iter in no_na_cast.loc[index,'cast']:
    if type(iter)== dict:
      actor= iter['name']
      if 'Robert De Niro' in actor:
        profit1.append(no_na_cast.loc[index,'profit'])
        movie1.append(no_na_cast.loc[index,'original_title'])




      if 'Samuel L. Jackson' in actor:
        profit2.append(no_na_cast.loc[index,'profit'])
        movie2.append(no_na_cast.loc[index,'original_title'])

#creating a loop to get the genres for Robert and Samuel
gener_r=[]
a=[]
for i in range(len(movie1)):
  for g in no_na_cast.loc[i,'genres']:
    a.append(g['name'])

  gener_r.append(a)
  a=[]

gener_s=[]
b=[]
for i in range(len(movie2)):
  for g in no_na_cast.loc[i,'genres']:
    b.append(g['name'])

  gener_s.append(b)
  b=[]

genr = np.array(gener_r, dtype=object)
gens = np.array(gener_s, dtype=object)

print(genr.shape)
print(gens.shape)

#creating sub dataframe for Robert
mov1= pd.DataFrame(movie1,columns=['Movie Name'])
prof1=pd.DataFrame(profit1,columns=['Movie Profit'])
gen1= pd.DataFrame(genr.flatten(),columns=['Genres'])

Movies_by_Robert=pd.concat([mov1,gen1,prof1],axis=1)

"""### Movies by Robert De Niro"""

Movies_by_Robert.sort_values(by='Movie Profit',ascending=False).head()

#creating sub dataframe for Samuel
mov2= pd.DataFrame(movie2,columns=['Movie Name'])
prof2=pd.DataFrame(profit2,columns=['Movie Profit'])
gen2= pd.DataFrame(gens.flatten(),columns=['Genres'])

Movies_by_Samuel=pd.concat([mov1,gen1,prof1],axis=1)

"""###Movies by Samuel L jackson"""

Movies_by_Samuel.sort_values(by='Movie Profit',ascending=False).head()

"""**6. Top 3 directors prefer which actors the most?**"""

pd.DataFrame((imdb1['crew'][0]))

def find_directors(li):

  job_iterator = 0

  if type(li)!= float:

    while True:
      if li[job_iterator]['job']!='Director':
        job_iterator+=1
      else:
        return li[job_iterator]['name']

imdb1['director_name'] = imdb1['crew'].apply(find_directors)
imdb1['director_name'].tail(15)

direct_rank= imdb1.groupby('director_name')['popularity'].mean().sort_values(ascending = False).reset_index()

print(direct_rank.head(4))
print(imdb1.head(2))

imdb1['cast_name'] = imdb1['cast'].apply(lambda x:[i['name'] for i in x] if isinstance(x,list) else [])

actor1 = list(imdb1[imdb1['director_name']==direct_rank['director_name'][0]]['cast_name'])[0][0]
actor2 = list(imdb1[imdb1['director_name']==direct_rank['director_name'][1]]['cast_name'])[0][0]
actor3 = list(imdb1[imdb1['director_name']==direct_rank['director_name'][2]]['cast_name'])[0][0]

print(f"Top director {direct_rank['director_name'][0]}'s prefered actor is {actor1}")
print(f"Second Top director {direct_rank['director_name'][1]} prefered actor is {actor2}")
print(f"Third Top director {direct_rank['director_name'][2]} prefered actor is {actor3}")

